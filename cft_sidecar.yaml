# Cyral Sidecar

AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Sidecar basics'
      Parameters:
      - SidecarId
      - ControlPlane
      - ClientId
      - ClientSecret
      - NamePrefix
    - Label:
        default: 'Networking and Security Configuration'
      Parameters:
      - VpcId
      - Subnets
      - SSHKeyName
    - Label:
        default: 'Advanced'
      Parameters:
      - SidecarVersion
      - SidecarInstanceType
      - AmiId
      - LoadBalancerCertificateArn
      - DNSName
      - LoadBalancerScheme
      - AssociatePublicIpAddress
      - ContainerRegistry
      - SecretArn
      - SecretRoleArn
      - CACertificateRoleArn
      - CACertificateSecretArn
      - TLSCertificateRoleArn
      - TLSCertificateSecretArn
      - IAMPolicies
      - RepositoriesSupported
    - Label:
        default: 'High Availability'
      Parameters:
      - DeployLoadBalancer
      - AsgMin
      - AsgMax
      - AsgDesired
    - Label:
        default: 'Custom User Data'
      Parameters:
      - CustomUserDataPre
      - CustomUserDataPreSidecarStart
      - CustomUserDataPost
    - Label:
        default: 'Snowflake Configuration'
      Parameters:
      - IdPSSOLoginURL
      - IdPCertificate
      - SidecarPublicIdPCertificate
      - SidecarPrivateIdPKey

Parameters:
  AssociatePublicIpAddress :
    Description: "Associates a public IP to sidecar EC2 instances"
    Type: String
    AllowedValues: [true, false]
    Default: false
    ConstraintDescription: must specify 'true' or 'false'.

  TLSCertificateRoleArn:
    Description: "(Optional) ARN of an AWS IAM Role to assume when reading the TLS certificate."
    Type: String
    Default: ""
    AllowedPattern: "^(|arn:.+)$"

  CACertificateRoleArn:
    Description: "(Optional) ARN of an AWS IAM Role to assume when reading the CA certificate."
    Type: String
    Default: ""
    AllowedPattern: "^(|arn:.+)$"

  ContainerRegistry:
    Description: "Address of the container registry where Cyral images are stored."
    Type: String
    AllowedPattern: ".+"
    Default: "public.ecr.aws/cyral"

  DNSName:
    Description: "(Optional) Fully qualified domain name that will be automatically created/updated to reference the sidecar LB"
    Type: String
    Default: ""

  VpcId:
    Description: "AWS VPC ID to deploy sidecar to"
    Type: AWS::EC2::VPC::Id
    AllowedPattern: ".+"

  ClientId:
    NoEcho: true
    Description: "Sidecar client ID"
    Type: String
    AllowedPattern: ".+"

  ClientSecret:
    NoEcho: true
    Description: "Sidecar client secret"
    Type: String
    AllowedPattern: ".+"

  IdPSSOLoginURL:
    Description: "(Optional) The IdP SSO URL for the IdP being used with Snowflake. Required if using SSO with Snowflake."
    Type: String
    Default: ""

  IdPCertificate:
    Description: "(Optional) The certificate used to verify SAML assertions from the IdP being used with Snowflake. Enter this value as a one-line string with literal \n characters specifying the line breaks. Required if using SSO with Snowflake."
    Type: String
    Default: ""

  LoadBalancerCertificateArn:
    Type: String
    Description: (Optional) ARN of SSL certificate that will be used for client connections to Snowflake or S3 Browser.
    Default: ""

  TLSCertificateSecretArn:
    Type: String
    Description: (Optional) ARN of TLS certificate needed by the sidecar to terminate TLS connections.
    Default: ""

  CACertificateSecretArn:
    Type: String
    Description: (Optional) ARN of CA certificate needed by the sidecar to sign proxied TLS connections.
    Default: ""

  LoadBalancerScheme:
    Description: "EC2 network load balancer scheme ('internal' or 'internet-facing')"
    Type: String
    AllowedValues: ['internal', 'internet-facing']
    Default: 'internal'
    ConstraintDescription: must specify 'internal' or 'internet-facing'.

  SecretArn:
    Description: "(Optional) ARN of the secret with the credentials used by the sidecar."
    Type: String
    Default: ""

  SecretRoleArn:
    Description: "(Optional) ARN of an AWS IAM Role to assume when reading the secret informed in `SecretArn`."
    Type: String
    Default: ""

  SSHKeyName:
    Type: String
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances."
    Default: ""

  SidecarPublicIdPCertificate:
    Description: "(Optional) The public certificate used to verify signatures for SAML Assertions generated by the sidecar. Required if using SSO with Snowflake."
    Type: String
    Default: ""

  SidecarPrivateIdPKey:
    Description: "(Optional) The private key used to sign SAML Assertions generated by the sidecar. Required if using SSO with Snowflake."
    Type: String
    Default: ""
    NoEcho: true

  SidecarInstanceType:
    AllowedValues:
      [t3.small, t3.medium, t3.large, t3.xlarge, m5.large, m5.xlarge, m5n.large, m5n.xlarge, c5.large, c5.xlarge, r5.large, r5.xlarge]
    Default: t3.medium
    Description: "Amazon EC2 instance type for the sidecar instances"
    Type: String

  Subnets:
    Description: "Subnets to add sidecar to"
    Type: "List<AWS::EC2::Subnet::Id>"

  SidecarId:
    Type: String
    Description: "Sidecar identifier"
    AllowedPattern: ".+"

  SidecarVersion:
    Type: String
    Description: "(Optional) The version of the sidecar. If unset, the version will be dynamically retrieved from the Control Plane."
    Default: ""

  ControlPlane:
    Type: String
    Description: Control plane URL - <tenant>.app.cyral.com
    AllowedPattern: ".+"

  AmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: "Amazon Linux 2023 AMI ID for sidecar EC2 instances. The default behavior is to use the latest version.
      In order to define a new image, replace 'recommended' by the desired image name (eg 'amzn2-ami-ecs-hvm-2.0.20181112-x86_64-ebs')."
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'

  AsgMin:
    Description: "The minimum number of hosts to create in the auto autoscaling group"
    Type: "String"
    Default: "1"
    AllowedPattern: "[0-9]+"

  AsgDesired:
    Description: "The desired number of hosts to create in the auto scaling group"
    Type: "String"
    Default: "1"
    AllowedPattern: "[0-9]+"

  AsgMax:
    Description: "The maximum number of hosts to create in the auto scaling group"
    Type: "String"
    Default: "2"
    AllowedPattern: "[0-9]+"

  DeployLoadBalancer:
    Description: "Deploy or not the load balancer and target groups. This option makes the ASG have only one replica, irrelevant of the Asg Min Max and Desired"
    Type: "String"
    Default: "true"
    AllowedValues:
      - "true"
      - "false"

  CustomTag:
    Type: String
    Description: "(Optional) Custom tag to be added in the sidecar resources. Ex: \"key=value\"."
    Default: ""
    AllowedPattern: "^([0-9a-zA-Z]+=[0-9a-zA-Z]+|)$"

  NamePrefix:
    Type: String
    Description: "Prefix for names of the AWS resources created. Maximum length is 24 characters."

  IAMPolicies:
    Type: CommaDelimitedList
    Description: "(Optional) List of IAM policies ARNs that will be attached to the sidecar IAM role (Comma Delimited List)"
    Default: ""

  RepositoriesSupported:
    Type: String
    Description: "List of all repositories that will be supported by the sidecar (lower case only)"
    Default: "denodo,dremio,dynamodb,mongodb,mysql,oracle,postgresql,redshift,snowflake,sqlserver,s3"

  CustomUserDataPre:
    Type: String
    Description: (Optional) Ancillary consumer supplied user-data script. Provide Bash script commands to be executed before the sidecar installation. Ex:"echo 'TEST'".
    Default: ""

  CustomUserDataPreSidecarStart:
    Type: String
    Description: (Optional) Ancillary consumer supplied user-data script. Provide Bash script commands to be executed before the sidecar starts. Ex:"echo 'TEST'"
    Default: ""

  CustomUserDataPost:
    Type: String
    Description: (Optional) Ancillary consumer supplied user-data script. Provide Bash script commands to be executed after the sidecar starts. Ex:"echo 'TEST'"
    Default: ""

Conditions:
  useCustomTag: !Not [!Equals [!Ref CustomTag, '']]
  hasSSHKeyName: !Not [!Equals [!Ref SSHKeyName, '']]
  deployLoadBalancer: !Equals [!Ref DeployLoadBalancer, 'true']
  mustAttachIAMPolicies: !Not [!Equals [!Join ["", !Ref IAMPolicies], ""]]
  loadBalancerCertificateArnNotEmpty: !And [!Not [!Equals [!Ref LoadBalancerCertificateArn, '']], !Condition deployLoadBalancer]
  loadBalancerCertificateArnEmpty: !And [!Equals [!Ref LoadBalancerCertificateArn, ''], !Condition deployLoadBalancer]
  dnsNameNotEmpty: !Not [!Equals [!Ref DNSName, '']]
  hasNamePrefix: !Not [!Equals [!Ref NamePrefix, '']]
  shouldCreateSecret: !Equals [!Ref SecretArn, '']
  tlsCertificateSecretArnEmpty: !Equals [!Ref TLSCertificateSecretArn, '']
  tlsCertificateSecretArnNotEmpty: !Not [!Condition tlsCertificateSecretArnEmpty]
  tlsCertificateRoleArnEmpty: !Equals [!Ref TLSCertificateRoleArn, '']
  tlsCertificateRoleArnNotEmpty: !Not [!Condition tlsCertificateRoleArnEmpty]
  tlsCertificateDoNotAssumeRole: !And
    - !Condition tlsCertificateSecretArnNotEmpty
    - !Condition tlsCertificateRoleArnEmpty
  tlsCertificateMustAssumeRole: !And
    - !Condition tlsCertificateSecretArnNotEmpty
    - !Condition tlsCertificateRoleArnNotEmpty

  caCertificateSecretArnEmpty: !Equals [!Ref CACertificateSecretArn, '']
  caCertificateSecretArnNotEmpty: !Not [!Condition caCertificateSecretArnEmpty]
  caCertificateRoleArnEmpty: !Equals [!Ref CACertificateRoleArn, '']
  caCertificateRoleArnNotEmpty: !Not [!Condition caCertificateRoleArnEmpty]
  caCertificateDoNotAssumeRole: !And
    - !Condition caCertificateSecretArnNotEmpty
    - !Condition caCertificateRoleArnEmpty
  caCertificateMustAssumeRole: !And
    - !Condition caCertificateSecretArnNotEmpty
    - !Condition caCertificateRoleArnNotEmpty

Resources:
  CloudwatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !If [hasNamePrefix, !Join ["-", ["cyral", !Ref NamePrefix]], "cyral-sidecar"]
      RetentionInDays: 14
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
        - Fn::If:
          - useCustomTag
          - Key: !Select [0, !Split ["=", !Ref CustomTag]]
            Value: !Select [1, !Split ["=", !Ref CustomTag]]
          - !Ref AWS::NoValue

  AutoScalingGroupSidecar:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: 1
        PauseTime: "PT5M"
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref SidecarLaunchTemplate
        Version: !GetAtt SidecarLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier: !Ref Subnets
      MinSize: !If [deployLoadBalancer, !Ref AsgMin, "1"]
      MaxSize: !If [deployLoadBalancer, !Ref AsgMax, "1"]
      Cooldown: "0"
      DesiredCapacity: !If [deployLoadBalancer, !Ref AsgDesired, "1"]
      HealthCheckType: EC2
      HealthCheckGracePeriod: 600
      TargetGroupARNs:
        - !If [deployLoadBalancer, !Ref NLBTargetGroup453, !Ref AWS::NoValue]
        - !If [deployLoadBalancer, !Ref NLBTargetGroup1433, !Ref AWS::NoValue]
        - !If [deployLoadBalancer, !Ref NLBTargetGroup1521, !Ref AWS::NoValue]
        - !If [deployLoadBalancer, !Ref NLBTargetGroup3306, !Ref AWS::NoValue]
        - !If [deployLoadBalancer, !Ref NLBTargetGroup5432, !Ref AWS::NoValue]
        - !If [deployLoadBalancer, !Ref NLBTargetGroup5439, !Ref AWS::NoValue]
        - !If [deployLoadBalancer, !Ref NLBTargetGroup27017, !Ref AWS::NoValue]
        - !If [deployLoadBalancer, !Ref NLBTargetGroup27018, !Ref AWS::NoValue]
        - !If [deployLoadBalancer, !Ref NLBTargetGroup27019, !Ref AWS::NoValue]
        - !If [deployLoadBalancer, !If [loadBalancerCertificateArnNotEmpty, !Ref NLBTargetGroupTLS443, !Ref NLBTargetGroup443], !Ref AWS::NoValue]
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupInServiceInstances"
            - "GroupPendingInstances"
            - "GroupTerminatingInstances"
            - "GroupTotalInstances"
      Tags:
        - Key: "Name"
          Value: !If [hasNamePrefix, !Join ["-", ["cyral", !Ref NamePrefix]], "cyral"]
          PropagateAtLaunch: true
        - Key: "SidecarVersion"
          Value: !Ref SidecarVersion
          PropagateAtLaunch: true
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
          PropagateAtLaunch: true
        - Key: "MetricsPort"
          Value: "9000"
          PropagateAtLaunch: true
        - Fn::If:
          - useCustomTag
          - Key: !Select [0, !Split ["=", !Ref CustomTag]]
            Value: !Select [1, !Split ["=", !Ref CustomTag]]
            PropagateAtLaunch: true
          - !Ref AWS::NoValue
    CreationPolicy:
      ResourceSignal:
        Count: 0
        Timeout: PT5M

  SidecarHostProfile:
    DependsOn: SidecarHostPolicy
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref SidecarHostRole
      Path: /

  SidecarHostRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns: !If [mustAttachIAMPolicies, !Ref IAMPolicies, !Ref AWS::NoValue]

  SidecarHostPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: SidecarPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - "ec2:DescribeTags"
              - "autoscaling:CompleteLifecycleAction"
              - "autoscaling:SetInstanceHealth"
            Resource: "*"
            Effect: Allow
          - Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !GetAtt CloudwatchLogGroup.Arn
            Effect: Allow
          - Action:
              - "secretsmanager:GetSecretValue"
            Resource:
              - !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/cyral/*'
              - !Sub
                - '${secret_arn}*'
                - secret_arn: !If [shouldCreateSecret, !Ref SMSidecarSecret, !Ref SecretArn]
              - !If [tlsCertificateDoNotAssumeRole, !Ref TLSCertificateSecretArn, !Ref AWS::NoValue]
              - !If [caCertificateDoNotAssumeRole, !Ref CACertificateSecretArn, !Ref AWS::NoValue]
            Effect: Allow
          - Fn::If:
            - tlsCertificateMustAssumeRole
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Resource: !Ref TLSCertificateRoleArn
            - !Ref AWS::NoValue
          - Fn::If:
            - caCertificateMustAssumeRole
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Resource: !Ref CACertificateRoleArn
            - !Ref AWS::NoValue
      Roles:
        - !Ref SidecarHostRole

  SidecarLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-LT'
      LaunchTemplateData:
        KeyName: !If [hasSSHKeyName, !Ref SSHKeyName, !Ref AWS::NoValue]
        IamInstanceProfile:
          Name: !Ref SidecarHostProfile
        ImageId: !Ref AmiId
        InstanceType: !Ref SidecarInstanceType
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 15
              VolumeType: gp2
              DeleteOnTermination: true
              Encrypted: true
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: !Ref AssociatePublicIpAddress
            Groups:
              - !Ref SidecarSecurityGroup
        MetadataOptions:
          # This is needed because clients of AWS services run within
          # containers on EC2 instance. See https://github.com/aws/aws-sdk-go/issues/2972
          # for a detailed explanation.
          HttpPutResponseHopLimit: 1
          HttpTokens: 'required'
        UserData:
          Fn::Base64: !Sub
          - |
            #!/bin/bash -e

            ${functions}
            ${CustomUserDataPre}
            ${pre}
            ${CustomUserDataPreSidecarStart}
            ${post}
            ${CustomUserDataPost}

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroupSidecar --region ${AWS::Region}
          - functions:
              !Sub
              - |
                # Defining functions
                function package_install(){
                    echo "Updating and installing packages..."
                    yum update -y
                    yum install -y aws-cfn-bootstrap wget ec2-instance-connect docker jq
                }

                function docker_setup(){
                    echo "Configuring Docker..."
                    sudo usermod -a -G docker ec2-user
                    # Configure fd limit for ec2 instance and containers
                    sudo bash -c 'cat > /etc/security/limits.d/fdlimit.conf' << EOF
                *       soft  nofile  65535
                *       hard  nofile  65535
                EOF
                    sudo bash -c 'cat > /etc/sysconfig/docker' << EOF
                DAEMON_MAXFILES=65535
                OPTIONS="--default-ulimit nofile=65535:65535"
                DAEMON_PIDFILE_TIMEOUT=10
                EOF
                    sudo systemctl enable docker
                    sudo systemctl restart docker
                }

                function retry() {
                  RETRIES=15
                  while [ $RETRIES -gt 0 ]; do
                    set +e
                    $@
                    RESULT=$?
                    set -e
                    if [ $RESULT -eq 0 ]; then
                      echo "Success"
                      return 0
                    fi
                    echo "Failed"
                    sleep 5
                    let RETRIES-=1
                  done
                  echo "Retries exceeded"
                  exit 3
                }

                function extract_key_from_json_input() {
                  # Both key and tls.key are valid JSON keys for private keys.
                  # Values can be PEM strings or base64-encoded PEM strings.
                  jq -r '
                    (if has("key") then .key else ."tls.key" end) as $key |
                    if ($key | startswith("-----BEGIN")) then $key else ($key | gsub("\\s+"; "") | @base64d) end
                  '
                }

                function extract_cert_from_json_input() {
                  # Both cert and tls.crt are valid JSON keys for certificates.
                  # Values can be PEM strings or base64-encoded PEM strings.
                  jq -r '
                    (if has("cert") then .cert else ."tls.crt" end) as $cert |
                    if ($cert | startswith("-----BEGIN")) then $cert else ($cert | gsub("\\s+"; "") | @base64d) end
                  '
                }

                function get_secret_value() {
                  secret_arn="$1"
                  role_arn="$2"
                  [ -z "$secret_arn" ] && return
                  (
                    if [ -n "$role_arn" ]; then
                      assume_role_result="$(aws sts assume-role --role-arn $role_arn --role-session-name cyral-sidecar)"
                      export AWS_ACCESS_KEY_ID=$(echo "$assume_role_result" | jq -r .Credentials.AccessKeyId)
                      export AWS_SECRET_ACCESS_KEY=$(echo "$assume_role_result" | jq -r .Credentials.SecretAccessKey)
                      export AWS_SESSION_TOKEN=$(echo "$assume_role_result" | jq -r .Credentials.SessionToken)
                    fi
                    aws --region ${aws_region} secretsmanager get-secret-value --secret-id $secret_arn --query SecretString --output text
                  )
                }

                function get_secret(){
                    echo "Fetching Secret..."
                    if ! secret=$(get_secret_value "${secret_arn}" "${secret_role_arn}"); then
                        echo "ERROR: Unable to fetch sidecar secrets from ${secret_arn} see error above"
                        exit 1
                    fi
                    SIDECAR_CLIENT_ID=$(echo "$secret" | jq -r .clientId)
                    SIDECAR_CLIENT_SECRET=$(echo "$secret" | jq -r .clientSecret)
                }

                function load_certs() {
                    echo "Loading certificates..."
                    local sidecar_tls_cert_secret_value sidecar_ca_cert_secret_value
                    if ! sidecar_tls_cert_secret_value=$(get_secret_value "${sidecar_tls_certificate_secret_arn}" "${TLSCertificateRoleArn}"); then
                      echo "WARNING: Unable to fetch shared TLS certificate from ${sidecar_tls_certificate_secret_arn} see error above"
                    fi
                    if ! sidecar_ca_cert_secret_value=$(get_secret_value "${sidecar_ca_certificate_secret_arn}" "${CACertificateRoleArn}"); then
                      echo "WARNING: Unable to fetch shared CA certificate from ${sidecar_ca_certificate_secret_arn}" see error above.
                    fi
                    SIDECAR_TLS_KEY=$(echo "$sidecar_tls_cert_secret_value" | extract_key_from_json_input | base64 -w 0)
                    SIDECAR_TLS_CERT=$(echo "$sidecar_tls_cert_secret_value" | extract_cert_from_json_input | base64 -w 0)
                    SIDECAR_CA_KEY=$(echo "$sidecar_ca_cert_secret_value" | extract_key_from_json_input | base64 -w 0)
                    SIDECAR_CA_CERT=$(echo "$sidecar_ca_cert_secret_value" | extract_cert_from_json_input | base64 -w 0)
                }

                function load_idp_certs() {
                    echo "Loading IDP certificates..."
                    IDP_CERTIFICATE=$(echo "$secret" | jq -r 'select(.idpCertificate != null) | .idpCertificate')
                    SIDECAR_IDP_PUBLIC_CERT=$(echo "$secret" | jq -r 'select(.sidecarPublicIdpCertificate != null) | .sidecarPublicIdpCertificate')
                    SIDECAR_IDP_PRIVATE_KEY=$(echo "$secret" | jq -r 'select(.sidecarPrivateIdpKey != null) | .sidecarPrivateIdpKey')
                }

                function fetch_hostname() {
                    echo "Fetching public hostname..."
                    INSTANCE_ID=$(curl -sf -H "X-aws-ec2-metadata-token: $( \
                        curl -sf -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" \
                        )" http://169.254.169.254/latest/meta-data/instance-id || echo "$HOSTNAME")
                    echo "Setting INSTANCE_ID to '$INSTANCE_ID'"
                }

                function update_nginx_resolver(){
                    export NGINX_RESOLVER=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}')
                    echo "Setting NGINX_RESOLVER to '$NGINX_RESOLVER'..."
                }

                function get_token () {
                    echo "Getting Control Plane Token using port $1..."
                    local url_token="https://${ControlPlane}:$1/v1/users/oidc/token"
                    local e_state=$(set +o | grep errexit) # Store the current errexit state
                    set +e
                    token=$(curl --connect-timeout 60 --no-progress-meter --fail-with-body --request POST "$url_token" -d grant_type=client_credentials -d client_id="$SIDECAR_CLIENT_ID" -d client_secret="$SIDECAR_CLIENT_SECRET" 2>&1)
                    token_error=$(echo $?)
                    eval "$e_state" # Restore the errexit state
                }

                function get_sidecar_version () {
                    echo "Getting sidecar version from Control Plane..."
                    get_token "443"
                    if [[ $token_error -ne 0 ]]; then
                        error_443="$token"
                        get_token "8000"
                        if [[ $token_error -ne 0 ]]; then
                            echo "Unable to retrieve token!!"
                            echo "Attempt on 443: $error_443"
                            echo "Attempt on 8000: $token"
                            return 1
                        fi
                    fi
                    local access_token=$(echo "$token" | jq -r .access_token)
                    local resp=$(curl --no-progress-meter --fail-with-body --request GET "https://${ControlPlane}/v2/sidecars/${SidecarId}" -H "Authorization: Bearer $access_token")
                    if [[ $? -ne 0 ]]; then
                      echo "Error retrieving sidecar version from Control Plane."
                      return 1
                    fi
                    SIDECAR_VERSION=$(echo "$resp" | jq -r '.sidecar.version // empty')
                }

                function registry_login () {
                    echo "Container Registry Login..."
                    if [[ ${container_registry} == *"aws"* ]] && [[ ${container_registry} != *"public.ecr.aws"* ]]; then
                        echo "(login): Logging in to AWS ECR..."
                        aws ecr get-login-password --region $aws_region} | docker login --username AWS --password-stdin ${container_registry}
                    else
                        echo "(login): Won't log in automatically to any image registry. Image registry set to: ${container_registry}"
                    fi
                }

                # Checks if the specified Docker container is running without restarts within 5 seconds
                function containerCheck () {
                  CONTAINER_NAME="$1"
                  WAIT_TIME=0
                  EXPECTED_WAIT_TIME=5
                  until [ $WAIT_TIME -eq $EXPECTED_WAIT_TIME ] || [ "$(eval docker inspect "$CONTAINER_NAME" | jq -r -e '.[].RestartCount')" -ne 0 ]; do
                      printf "."
                      (( WAIT_TIME++ ))
                      sleep 1
                  done
                  echo ""
                  [ "$WAIT_TIME" -eq $EXPECTED_WAIT_TIME ]
                }

                function launch () {
                    echo "Starting sidecar..."
                    cd /home/ec2-user
                    SIDECAR_IMAGE=${container_registry}/cyral-sidecar:$SIDECAR_VERSION
                    retry docker pull -q $SIDECAR_IMAGE
                    retry docker run -d --name sidecar --network=host --log-driver=local --log-opt max-size=500m --restart=unless-stopped --env-file .env $SIDECAR_IMAGE
                    if ! containerCheck "sidecar"; then
                      echo "--> Problem with sidecar! Inspect the logs to diagnose the issue. <--"
                    fi
                }
              - aws_region: !Ref AWS::Region
                container_registry: !Ref ContainerRegistry
                secret_arn: !If [shouldCreateSecret, !Ref SMSidecarSecret, !Ref SecretArn]
                secret_role_arn: !Ref SecretRoleArn
                sidecar_ca_certificate_secret_arn: !If [caCertificateSecretArnNotEmpty, !Ref CACertificateSecretArn, '']
                sidecar_tls_certificate_secret_arn: !If [tlsCertificateSecretArnNotEmpty, !Ref TLSCertificateSecretArn, '']
            pre:
              !Sub
              - |
                mkdir -p /home/ec2-user/cyral/

                package_install
                get_secret
                fetch_hostname

                # Get the latest sidecar version from the Control Plane if necessary.
                IS_DYNAMIC_VERSION="false"
                SIDECAR_VERSION=${SidecarVersion}
                if [ -z $SIDECAR_VERSION ]; then
                  echo "Sidecar version is unset - version will be dynamically managed."
                  IS_DYNAMIC_VERSION="true"
                  get_sidecar_version
                  if [ $? -ne 0 ]; then
                    echo "Error getting sidecar version from Control Plane. Dynamic version support is only enabled for Control Planes >= v4.10"
                    exit 1
                  fi
                  if [ -z $SIDECAR_VERSION ]; then
                    echo "Sidecar version is undefined."
                    exit 1
                  fi

                  # Create custom health check scripts
                  cat << EOF > /home/ec2-user/cyral/healthcheck.sh
                #!/usr/bin/env bash
                health=\$(curl -sf -X GET "http://localhost:9000/health")
                if [ \$? -ne 0 ]; then
                  echo "Error getting sidecar health"
                  exit 1
                fi
                recycle_status=\$(echo \$health | jq -r .components.recycle.status)
                if [ \$recycle_status == "degraded" ]; then
                  echo "Sidecar instance has been marked for recycling - setting EC2 health to 'Unhealthy'"
                  aws autoscaling set-instance-health --region ${aws_region} --instance-id \$INSTANCE_ID --no-should-respect-grace-period --health-status Unhealthy
                fi
                EOF

                  cat << EOF > /etc/systemd/system/healthcheck.service
                [Unit]
                Description=Sidecar recycle EC2 health check
                [Service]
                Environment="INSTANCE_ID=$INSTANCE_ID"
                ExecStart=/home/ec2-user/cyral/healthcheck.sh
                EOF

                  cat << EOF > /etc/systemd/system/healthcheck.timer
                [Unit]
                Description=Sidecar recycle EC2 health check every 30 sec
                [Timer]
                OnBootSec=30
                OnUnitActiveSec=30
                AccuracySec=1
                [Install]
                WantedBy=timers.target
                EOF

                  # Start health check timer
                  chmod +x /home/ec2-user/cyral/healthcheck.sh
                  sudo systemctl enable healthcheck.timer
                  sudo systemctl daemon-reload
                  sudo systemctl start healthcheck.timer
                fi

                echo "Sidecar version: $SIDECAR_VERSION"

                docker_setup
                update_nginx_resolver
                load_certs
                load_idp_certs
                registry_login

                CYRAL_SIDECAR_ENDPOINT="${sidecar_endpoint}"
                if [ -z "$CYRAL_SIDECAR_ENDPOINT" ]; then
                    CYRAL_SIDECAR_ENDPOINT=$(curl --fail --silent --max-time 1 \
                        -H "X-aws-ec2-metadata-token: $(curl --max-time 1 --fail --silent \
                        -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")" \
                        http://169.254.169.254/latest/meta-data/public-ipv4 || (hostname -I 2>/dev/null || echo "manually-set-endpoint") | awk '{print $1}')
                fi

                echo "Sidecar endpoint: $CYRAL_SIDECAR_ENDPOINT"

                echo "Initializing environment variables..."
                cat > /home/ec2-user/.env << EOF

                IS_DYNAMIC_VERSION=$IS_DYNAMIC_VERSION
                IS_RECYCLABLE=true

                AWS_REGION=${aws_region}
                AWS_ACCOUNT_ID=${aws_account_id}
                LOG_GROUP_NAME=${log_group_name}

                TLS_SKIP_VERIFY=${tls_skip_verify}

                CYRAL_IDP_CERTIFICATE=${!IDP_CERTIFICATE}
                CYRAL_NGINX_RESOLVER=$NGINX_RESOLVER
                CYRAL_SSO_LOGIN_URL=${IdPSSOLoginURL}

                CYRAL_SIDECAR_IDP_PUBLIC_CERT=${SidecarPublicIdPCertificate}
                CYRAL_SIDECAR_IDP_PRIVATE_KEY=${SidecarPrivateIdPKey}

                CYRAL_SIDECAR_CA_CERT=${!SIDECAR_CA_CERT}
                CYRAL_SIDECAR_CA_PRIVATE_KEY=${!SIDECAR_CA_KEY}
                CYRAL_SIDECAR_TLS_CERT=${!SIDECAR_TLS_CERT}
                CYRAL_SIDECAR_TLS_PRIVATE_KEY=${!SIDECAR_TLS_KEY}

                CYRAL_CONTROL_PLANE=${ControlPlane}

                CYRAL_LOAD_BALANCER_TLS_PORTS=${load_balancer_tls_ports}

                CYRAL_SIDECAR_ID=${SidecarId}
                CYRAL_SIDECAR_CLIENT_ID=${!SIDECAR_CLIENT_ID}
                CYRAL_SIDECAR_CLIENT_SECRET=${!SIDECAR_CLIENT_SECRET}
                CYRAL_SIDECAR_CLOUD_PROVIDER=aws
                CYRAL_SIDECAR_DEPLOYMENT_PROPERTIES='{ \"account-id\": \"${aws_account_id}\",\"region\": \"${aws_region}\",\"deployment-type\": \"cloudformation-ec2\"}'
                CYRAL_SIDECAR_ENDPOINT=$CYRAL_SIDECAR_ENDPOINT
                CYRAL_SIDECAR_INSTANCE_ID=$INSTANCE_ID
                CYRAL_SIDECAR_VERSION=$SIDECAR_VERSION

                CYRAL_REPOSITORIES_SUPPORTED=${repositories_supported}

                EOF
              - aws_account_id: !Ref AWS::AccountId
                aws_region: !Ref AWS::Region
                load_balancer_tls_ports: !If [loadBalancerCertificateArnNotEmpty, 443, '']
                log_group_name: !Ref CloudwatchLogGroup
                repositories_supported: !Ref RepositoriesSupported
                secret_arn: !If [shouldCreateSecret, !Ref SMSidecarSecret, !Ref SecretArn]
                sidecar_endpoint: !If [deployLoadBalancer, !If [dnsNameNotEmpty, !Ref DNSName, !GetAtt LoadBalancer.DNSName], ""]
                tls_skip_verify: 'tls'
            post: |
              launch

  SidecarSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enables SSH Access to Sidecar Hosts
      VpcId: !Ref VpcId
      Tags:
        - Key: "Name"
          Value: !If [hasNamePrefix, !Join ["-", ["cyral", !Ref NamePrefix]], "cyral"]
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
        - Fn::If:
          - useCustomTag
          - Key: !Select [0, !Split ["=", !Ref CustomTag]]
            Value: !Select [1, !Split ["=", !Ref CustomTag]]
          - !Ref AWS::NoValue
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 9000
          ToPort: 9000
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'icmp'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 453
          ToPort: 453
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 1433
          ToPort: 1433
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 1521
          ToPort: 1521
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 5439
          ToPort: 5439
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 27017
          ToPort: 27017
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 27018
          ToPort: 27018
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 27019
          ToPort: 27019
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 31010
          ToPort: 31010
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: deployLoadBalancer
    Properties:
      Name: !If [hasNamePrefix, !Join ["-", ["cyral", !Ref NamePrefix]], "cyral"]
      Type: network
      Scheme: !Ref LoadBalancerScheme
      Subnets: !Ref Subnets
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
        - Fn::If:
          - useCustomTag
          - Key: !Select [0, !Split ["=", !Ref CustomTag]]
            Value: !Select [1, !Split ["=", !Ref CustomTag]]
          - !Ref AWS::NoValue

  # Load Balancer Listeners using TCP
  NLBListeners453:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: deployLoadBalancer
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref NLBTargetGroup453
      LoadBalancerArn: !Ref LoadBalancer
      Port: 453
      Protocol: TCP

  NLBListeners1433:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: deployLoadBalancer
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref NLBTargetGroup1433
      LoadBalancerArn: !Ref LoadBalancer
      Port: 1433
      Protocol: TCP

  NLBListeners1521:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: deployLoadBalancer
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref NLBTargetGroup1521
      LoadBalancerArn: !Ref LoadBalancer
      Port: 1521
      Protocol: TCP

  NLBListeners3306:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: deployLoadBalancer
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref NLBTargetGroup3306
      LoadBalancerArn: !Ref LoadBalancer
      Port: 3306
      Protocol: TCP

  NLBListeners5432:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: deployLoadBalancer
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref NLBTargetGroup5432
      LoadBalancerArn: !Ref LoadBalancer
      Port: 5432
      Protocol: TCP

  NLBListeners5439:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: deployLoadBalancer
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref NLBTargetGroup5439
      LoadBalancerArn: !Ref LoadBalancer
      Port: 5439
      Protocol: TCP

  NLBListeners27017:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: deployLoadBalancer
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref NLBTargetGroup27017
      LoadBalancerArn: !Ref LoadBalancer
      Port: 27017
      Protocol: TCP

  NLBListeners27018:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: deployLoadBalancer
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref NLBTargetGroup27018
      LoadBalancerArn: !Ref LoadBalancer
      Port: 27018
      Protocol: TCP

  NLBListeners27019:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: deployLoadBalancer
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref NLBTargetGroup27019
      LoadBalancerArn: !Ref LoadBalancer
      Port: 27019
      Protocol: TCP

  NLBListeners31010:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: deployLoadBalancer
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref NLBTargetGroup31010
      LoadBalancerArn: !Ref LoadBalancer
      Port: 31010
      Protocol: TCP

  NLBListeners443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: loadBalancerCertificateArnEmpty
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref NLBTargetGroup443
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: TCP

  # Load Balancer Listeners using TLS
  NLBListenersTLS443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: loadBalancerCertificateArnNotEmpty
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref NLBTargetGroupTLS443
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: TLS
      Certificates:
      - CertificateArn: !Ref LoadBalancerCertificateArn

  NLBTargetGroupTLS443:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: loadBalancerCertificateArnNotEmpty
    Properties:
      Port: 443
      HealthCheckPort: '9000'
      HealthCheckPath: '/health'
      HealthCheckProtocol: HTTP
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "0"
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: "source_ip"

  NLBTargetGroup443:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: loadBalancerCertificateArnEmpty
    Properties:
      Port: 443
      HealthCheckPort: '9000'
      HealthCheckPath: '/health'
      HealthCheckProtocol: HTTP
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "0"

  NLBTargetGroup453:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: deployLoadBalancer
    Properties:
      Port: 453
      HealthCheckPort: '9000'
      HealthCheckPath: '/health'
      HealthCheckProtocol: HTTP
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "0"

  NLBTargetGroup1433:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: deployLoadBalancer
    Properties:
      Port: 1433
      HealthCheckPort: '9000'
      HealthCheckPath: '/health'
      HealthCheckProtocol: HTTP
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "0"

  NLBTargetGroup1521:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: deployLoadBalancer
    Properties:
      Port: 1521
      HealthCheckPort: '9000'
      HealthCheckPath: '/health'
      HealthCheckProtocol: HTTP
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "0"

  NLBTargetGroup3306:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: deployLoadBalancer
    Properties:
      Port: 3306
      HealthCheckPort: '9000'
      HealthCheckPath: '/health'
      HealthCheckProtocol: HTTP
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "0"

  NLBTargetGroup5432:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: deployLoadBalancer
    Properties:
      Port: 5432
      HealthCheckPort: '9000'
      HealthCheckPath: '/health'
      HealthCheckProtocol: HTTP
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "0"

  NLBTargetGroup5439:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: deployLoadBalancer
    Properties:
      Port: 5439
      HealthCheckPort: '9000'
      HealthCheckPath: '/health'
      HealthCheckProtocol: HTTP
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "0"

  NLBTargetGroup27017:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: deployLoadBalancer
    Properties:
      Port: 27017
      HealthCheckPort: '9000'
      HealthCheckPath: '/health'
      HealthCheckProtocol: HTTP
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "0"

  NLBTargetGroup27018:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: deployLoadBalancer
    Properties:
      Port: 27018
      HealthCheckPort: '9000'
      HealthCheckPath: '/health'
      HealthCheckProtocol: HTTP
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "0"

  NLBTargetGroup27019:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: deployLoadBalancer
    Properties:
      Port: 27019
      HealthCheckPort: '9000'
      HealthCheckPath: '/health'
      HealthCheckProtocol: HTTP
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "0"

  NLBTargetGroup31010:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: deployLoadBalancer
    Properties:
      Port: 31010
      HealthCheckPort: '9000'
      HealthCheckPath: '/health'
      HealthCheckProtocol: HTTP
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "0"

  SMSidecarSecret:
    Type: AWS::SecretsManager::Secret
    Condition: shouldCreateSecret
    Properties:
      Description: Cyral Sidecar secret with client id, secret and container registry key.
      Name: !Sub '/cyral/sidecars/${SidecarId}/secrets'
      SecretString: !Sub '{"clientId":"${ClientId}", "clientSecret": "${ClientSecret}", "sidecarPublicIdpCertificate": "${SidecarPublicIdPCertificate}", "sidecarPrivateIdpKey": "${SidecarPrivateIdPKey}", "idpCertificate": "${IdPCertificate}"}'
      KmsKeyId: !Ref AWS::NoValue
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
        - Fn::If:
          - useCustomTag
          - Key: !Select [0, !Split ["=", !Ref CustomTag]]
            Value: !Select [1, !Split ["=", !Ref CustomTag]]
          - !Ref AWS::NoValue

Outputs:
  DNS:
    Description: Sidecar DNS name
    Value: !If [deployLoadBalancer, !GetAtt LoadBalancer.DNSName, "NA"]

  LoadBalancerDNS:
    Description: Sidecar load balancer DNS name
    Value: !If [deployLoadBalancer, !GetAtt LoadBalancer.DNSName, "NA"]

  SecurityGroupID:
    Description: Sidecar security group id
    Value: !Ref SidecarSecurityGroup

  SidecarNameIdentifier:
    Description: Identifier used to create various AWS resources such as EC2 Name and CloudWatch Log Group Name
    Value: !If [hasNamePrefix, !Join ["-", ["cyral", !Ref NamePrefix]], "cyral"]
